#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// обработки
Перем КонтекстЯдра;
Перем Утверждения;
Перем Ожидаем;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт 
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	// подключение дополнительных обработок
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт 
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	ДобавитьРегистрамиНакопления(НаборТестов);
	НаборТестов.СтрогийПорядокВыполнения();
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт 
	НачатьТранзакцию();	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт	
	Если ТранзакцияАктивна() Тогда
	    ОтменитьТранзакцию();
	КонецЕсли;	
КонецПроцедуры

Процедура ДобавитьРегистрамиНакопления(НаборТестов)
	
	Регистры = Регистры("TQM", Истина);
	Для Каждого КлючЗначение Из Регистры Цикл
		
		МассивТестов = КлючЗначение.Значение;
		
		Если МассивТестов.Количество() Тогда
			НаборТестов.НачатьГруппу(КлючЗначение.Ключ, Истина);
		КонецЕсли;
		
		Для Каждого Тест Из МассивТестов Цикл
			ИмяПроцедуры = "ТестДолжен_ПроверитьРегистр";
			ТекстПояснения = НСтр("ru = 'Проверка регистра на наличие строковых измерений'");
			ИмяТеста = КонтекстЯдра.СтрШаблон_("%1 [%2]", Тест.ПолноеИмя, ТекстПояснения); 
			НаборТестов.Добавить(ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.Имя, Тест.ПолноеИмя), ИмяТеста);	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ЮнитТесты

Процедура ТестДолжен_ПроверитьРегистр(ИмяРегистра, ПолноеИмяРегистра) Экспорт 
	
	Регистр = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	
	ИзмеренияСоСтроками = Новый Массив;
	
	Для каждого _Измерение Из Регистр.Измерения Цикл
		
		ЕстьТипСтрока = _Измерение.Тип.СодержитТип(Тип("Строка"));
		Если ЕстьТипСтрока Тогда
			ИзмеренияСоСтроками.Добавить(_Измерение.Имя);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ИзмеренияСтрокой = СтрСоединить(ИзмеренияСоСтроками, Символы.ПС);
	Утверждения.Проверить(ИзмеренияСоСтроками.Количество() = 0, ИзмеренияСтрокой);	
	
КонецПроцедуры


#КонецОбласти 


#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Регистры(ПрефиксОбъектов, ОтборПоПрефиксу)

	ПодчинениеРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	
	Регистры = Новый Соответствие;
	Регистры.Вставить("РегистрыНакопления", Новый Массив);
	
	Для Каждого КлючЗначение Из Регистры Цикл
		Для Каждого Регистр Из Метаданные[КлючЗначение.Ключ] Цикл
			Если ОтборПоПрефиксу И Не ИмяСодержитПрефикс(Регистр.Имя, ПрефиксОбъектов) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураРегистра = Новый Структура;
			СтруктураРегистра.Вставить("Имя", Регистр.Имя);
			СтруктураРегистра.Вставить("Синоним", Регистр.Синоним);
			СтруктураРегистра.Вставить("ПолноеИмя", Регистр.ПолноеИмя());
			КлючЗначение.Значение.Добавить(СтруктураРегистра);
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Регистры;

КонецФункции 

Функция ИмяСодержитПрефикс(Имя, Префикс)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаПрефикса = СтрДлина(Префикс);
	Возврат СтрНайти(ВРег(Лев(Имя, ДлинаПрефикса)), Префикс) > 0;
	
КонецФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти
    
#Иначе
 ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли